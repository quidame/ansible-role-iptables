---
# Overridding the following variables allows anyone to do the most common tasks
# expected from any whatever-iptables role, such as: flush firewall, set it up
# from scratch, open or close ports when installing or uninstalling a service.


################################################################################
# iptables_apply__action
#
# Specifies the action to perform.
# - `template` (the default): configure firewall from scratch; use the variable
#   `iptables_apply__template_rules` to configure user-specific rules.
# - `append`, `insert`, `delete`: use `iptables_apply__rules` to add or delete
#   rules modifying the current firewall configuration.
# - `flush`: flush iptables rules and set policy to `ACCEPT` for all chains. It
#   also ensures the service is stopped and disabled.
#
iptables_apply__action: template


################################################################################
# iptables_apply__rules
#
# The iptables rules to apply when `iptables_apply__action` is one of `append`,
# `delete` or `insert`. This is a list of dictionaries accepting the following
# keys:
# * name
#   Mandatory. String. Used as the rule's comment
# * chain
#   One of INPUT, FORWARD or OUTPUT. Defaults to INPUT.
# * protocol
#   One of 'tcp' or 'udp'. Defaults to 'tcp'.
# * dport
#   Mandatory. May be a port number, a port range, or a comma-separated list of
#   port numbers and/or port ranges (e.g. '12000:12999,54321')
# * jump
#   One of ACCEPT, DROP or REJECT. Defaults to ACCEPT.
#
# Example:
# iptables_apply__rules:
#   - name: PostgreSQL
#     dport: 5432
#   - name: Knot DNS
#     dport: 53,953
#     protocol: udp
#
# Will be templated as:
# -A INPUT -p tcp -m tcp --dport 5432 -m comment --comment PostgreSQL -j ACCEPT
# -A INPUT -p udp -m multiport --dports 53,953 -m comment --comment "Knot DNS" -j ACCEPT
#
iptables_apply__rules: []


################################################################################
# iptables_apply__service
#
# The name of the Systemd service that restores iptables ruleset at boot.
# Default value depends on the distribution. You may want to override it in a
# lot of cases. Also note that this role does not install anything, it just
# applies rules in a safe way and ensures they will be applied after reboot.
# On Debian, netfilter-persistent also needs iptables-persistent (the second
# one is a plugin of the first).
#
iptables_apply__service: "{{ 'netfilter-persistent' if ansible_os_family == 'Debian' else 'iptables' }}"


################################################################################
# iptables_apply__template
#
# Path of a template file that once evaluated is used as input for the command
# `iptables-restore`. This allows one to implement custom templates with all the
# stuff and granularity she wants. The role provides two templates: the default
# one (for the `template` action) and another to flush desired tables (for the
# `flush` action).
#
iptables_apply__template: iptables_apply.j2


################################################################################
# iptables_apply__template_rules
#
# The iptables rules to apply in addition to the sanity ruleset provided by
# the template. This is a list of dictionaries accepting the same keys than
# `iptables_apply__rules` and defaults to the same value.
#
iptables_apply__template_rules: "{{ iptables_apply__rules }}"


################################################################################
# iptables_apply__timeout
#
# The delay, in seconds, after what the initial iptables ruleset is restored if
# not disabled by the confirmation task.
#
iptables_apply__timeout: 20
