---
################################################################################
# iptables_apply__action
#
# Specifies the action to perform.
# - `template` (the default): configure firewall from scratch; use the variable
#   `iptables_apply__template_rules` to configure user-specific rules.
# - `append`, `insert`, `delete`: use `iptables_apply__rules` to add or delete
#   rules modifying the current firewall configuration.
#
iptables_apply__action: template


################################################################################
# iptables_apply__noflush
#
# If `True`, current iptables ruleset is not flushed.
#
iptables_apply__noflush: false


################################################################################
# iptables_apply__persist
#
# Whether or not to make the currently applied ruleset persistent across
# reboots. Default is `true`.
#
iptables_apply__persist: true


################################################################################
# iptables_apply__rules
#
# The iptables rules to apply in addition to the sanity ruleset provided by
# the template. This is a list of dictionnaries accepting the following keys:
# * name
#   Mandatory. String. Used as the rule's comment
# * chain
#   One of INPUT, FORWARD or OUTPUT. Defaults to INPUT.
# * protocol
#   One of 'tcp' or 'udp'. Defaults to 'tcp'.
# * dport
#   Mandatory. May be a port number, a port range, or a comma-separated list of
#   port numbers and/or port ranges (e.g. '12000:12999,54321')
# * jump
#   One of ACCEPT, DROP or REJECT. Defaults to ACCEPT.
#
# Example:
# iptables_apply__rules:
#   - name: PostgreSQL
#     dport: 5432
#   - name: Knot DNS
#     dport: 53,953
#     protocol: udp
#
# Will be templated as:
# -A INPUT -p tcp -m tcp --dport 5432 -m comment --comment PostgreSQL -j ACCEPT
# -A INPUT -p udp -m multiport --dports 53,953 -m comment --comment "Knot DNS" -j ACCEPT
#
iptables_apply__rules: []


################################################################################
# iptables_apply__template
#
# Path of a template file that once evaluated is used as input for the command
# `iptables-restore`.
#
iptables_apply__template: iptables_apply.j2


################################################################################
# iptables_apply__template_core
#
# Whether or not to apply the core ruleset provided by the template. The core
# rules, a.k.a. sanity rules, are inserted to ensure they will be evaluated
# first even if `iptables_apply__noflush` is True. Defaults to `true`.
#
iptables_apply__template_core: true


################################################################################
# iptables_apply__template_policy
#
# The default policy to apply for each chain of the filter table. If a policy
# is undefined in this variable, then it will not be changed on the target. For
# example, to keep all current policies (useful with 'iptables_apply__noflush'
# set to 'True'):
# iptables_apply__template_policy: {}
#
iptables_apply__template_policy:
  input: DROP
  forward: DROP
  output: ACCEPT


################################################################################
# iptables_apply__template_rules
#
# The iptables rules to apply in addition to the sanity ruleset provided by
# the template. This is a list of dictionnaries accepting the same keys than
# `iptables_apply__rules` and defaults to the same value.
#
iptables_apply__template_rules: "{{ iptables_apply__rules }}"


################################################################################
# iptables_apply__timeout
#
# The delay, in seconds, after what the initial iptables ruleset is restored if
# the confirmation file is missing.
#
iptables_apply__timeout: 20

