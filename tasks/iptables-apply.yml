---
# No choice. We need a shell task to run in background. `async=1` and `poll=0`
# are mandatory parameters to ensure ansible detaches itself from the script.
# So the next task can be played DURING this one.
- name: apply iptables ruleset
  shell: >
    (
      set -e
      rm -f {{ iptables_apply__path_cookie }}
      iptables-restore {{ '--noflush' if iptables_apply__noflush|bool == True else '' }} {{ iptables_apply__path_buffer }}
      i=0
      while test $i -lt {{ iptables_apply__timeout|int }}; do
        sleep 1; i=$((i+1))
        test -e {{ iptables_apply__path_cookie }} && exit 0
      done
      iptables-restore {{ iptables_apply__path_backup }} &&
      touch {{ iptables_apply__path_cookie }}
    ) &
  async: 1
  poll: 0


# If the cookie exists, it means initial ruleset has been restored, and it
# shouln't. If it doesn't exist, it means we have to create it to avoid the
# rollback.
- name: confirm applied ruleset
  file:
    path: "{{ iptables_apply__path_cookie }}"
    state: "{{ item }}"
  register: confirm
  failed_when: '( item == "absent" and confirm is changed ) or ( item == "touch" and confirm is not changed )'
  with_items:
    - absent
    - touch
  # By switching connection plugin, we are sure a new connection is initialized,
  # i.e. we don't reuse a control socket from a previous task.
  connection: "{{ 'paramiko' if initial_connection == 'ssh' else 'ssh' }}"
