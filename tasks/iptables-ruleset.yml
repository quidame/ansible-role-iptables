---
# The regexp being the same, a same task may be used to `append`, `insert` or
# `delete` rules.

- name: "{{ iptables_apply__action }}{{ '' if iptables_apply__action == 'delete' else '/update' }} rules in ruleset's buffer"
  lineinfile:
    # Do not perform action directly upon the system file nor the system state.
    path: "{{ iptables_apply__path_buffer }}"
    # The following regexp catches rules matching either the `dport` or the
    # `name` values, making easy to never 'duplicate' a rule nor keep obsolete
    # rules as long as we don't modify `name` and `dport` at the same time.
    # This is also the way to actually **update** a rule, by modifying its
    # destination port(s) OR its comment, all other parameters remaining
    # unchanged.
    regexp: "^(-A {{
      iptables_apply_item.chain|default('INPUT') }} -p {{
      iptables_apply_item.protocol|default('tcp') }} -m (multiport|{{
      iptables_apply_item.protocol|default('tcp') }}) --dports? (({{
      iptables_apply_item.dport }} -m comment --comment .*)|(.* -m comment --comment (\"?){{
      iptables_apply_item.name }}\\6)) -j {{
      iptables_apply_item.jump|default('ACCEPT') }})$"
    # The build `iptables_apply_item.name|wordcount` allows our task to mimic
    # iptables command behaviour regarding double quotes enclosure. It's a good
    # approximation, but fails idempotency for names such as `foo-bar`, since
    # `-` is a word separator for jinja2, not for iptables.
    line: "-A {{
      iptables_apply_item.chain|default('INPUT') }} -p {{
      iptables_apply_item.protocol|default('tcp') }} -m {{ 'multiport --dports %s' %
      iptables_apply_item.dport if ',' in iptables_apply_item.dport|string else '%s --dport %s' % (
      iptables_apply_item.protocol|default('tcp'),
      iptables_apply_item.dport) }} -m comment --comment {{
      iptables_apply_item.name|regex_replace('^|$', '\"') if iptables_apply_item.name|wordcount != 1 else
      iptables_apply_item.name }} -j {{
      iptables_apply_item.jump|default('ACCEPT') }}"
    state: "{{ 'absent' if iptables_apply__action == 'delete' else 'present' }}"
    # `insertafter` and `insertbefore` are mutually exclusive, so 'omit' one of
    # them is mandatory. In the filter table, all rules take place between the
    # ':OUTPUT' policy and the 'COMMIT' instruction, that are the only marks to
    # ensure that a given rule is actually inserted (BEFORE the first rule)
    # when action is `insert`, or appended (AFTER the last rule) when action is
    # `append`, and left unchanged if already there. Other formula, and the use
    # of `firstmatch` may lead to duplicated rules and/or lack of idempotency.
    insertafter: "{{ '^:OUTPUT' if iptables_apply__action == 'insert' else omit }}"
    insertbefore: "{{ '^COMMIT' if iptables_apply__action == 'append' else omit }}"
    validate: "iptables-restore --test %s"
  loop: "{{ iptables_apply__rules }}"
  loop_control:
    loop_var: iptables_apply_item
  register: iptables_apply__ruleset
  diff: yes
