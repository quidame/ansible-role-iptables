---
# In the last task, we will switch connection plugin to be sute to not reuse
# a previous connection.
- name: get current connection plugin
  set_fact:
    initial_connection: "{{ ansible_connection }}"
  failed_when: "ansible_connection not in ['paramiko','ssh']"


# It will be used in case of rollback
- name: save initial state of the firewall
  shell: iptables-save > /run/iptables.saved


# First ensure the resulting file is in good shape when making it available on
# the remote host
- name: build iptables ruleset to be applied
  template:
    src: "{{ iptables_apply__template }}"
    dest: /run/iptables.apply
    validate: "iptables-restore --test %s"


# No choice. We need a shell task to run in background. `async=1` and `poll=0`
# are mandatory parameters to ensure ansible detaches itself from the script.
# So the next task can be played DURING this one.
- name: apply iptables ruleset
  shell: >
    (
      set -e
      rm -f /run/iptables.cookie
      iptables-restore {{ '--noflush' if iptables_apply__noflush|bool == True else '' }} /run/iptables.apply
      i=0
      while test $i -lt {{ iptables_apply__timeout|int }}; do
        sleep 1; i=$((i+1))
        test -e /run/iptables.cookie && exit 0
      done
      iptables-restore /run/iptables.saved &&
      touch /run/iptables.cookie
    ) &
  async: 1
  poll: 0


# If the cookie exists, it means initial ruleset has been restored, and it
# shouln't. If it doesn't exist, it means we have to create it to avoid the
# rollback.
- name: confirm applied ruleset
  file:
    path: /run/iptables.cookie
    state: "{{ item }}"
  register: confirm
  failed_when: '( item == "absent" and confirm is changed ) or ( item == "touch" and confirm is not changed )'
  with_items:
    - absent
    - touch
  # By switching connection plugin, we are sure a new connection is initialized,
  # i.e. we don't reuse a control socket from a previous task.
  connection: "{{ 'paramiko' if initial_connection == 'ssh' else 'ssh' }}"

