# Play the role as many times as needed to test every action and at least one
# ruleset that leads to roll back to the last one.
---
################################################################################
- name: PREPARE THE FIELD
  hosts: tests
  become: yes
  tasks:
    - name: install package
      apt:
        name: iptables-persistent
        state: present
      when: ansible_os_family|lower == "debian"
      register: install
      retries: 3
      delay: 5
      until: install is succeeded

    - name: install package
      yum:
        name: iptables
        state: present
      when: ansible_os_family|lower == "redhat"
      register: install
      retries: 3
      delay: 5
      until: install is succeeded

    - name: preset rules to append, insert, delete or template
      set_fact:
        to_append:
          - name: Web HTTP/HTTPS
            dport: 80,443
        to_insert:
          - name: 4 TESTS
            dport: "20:23"
        to_delete:
          - name: SSH
            dport: "{{ ansible_port|default(22) }}"
        to_update:
          - name: SNMP
            dport: 161
          - name: SNMP
            dport: 161
            protocol: udp
        iptables_apply__template_rules:
          - name: monitoring
            dport: 161,5666
          - name: monitoring
            dport: 161
            protocol: udp


################################################################################
- name: TEST ACTION 'FLUSH'
  hosts: tests
  become: yes
  connection: ssh
  roles:
    - role: iptables_apply
      iptables_apply__action: flush

  tasks:
    - name: validate flushed ruleset
      shell: iptables-save -t filter | grep -Ee '^(-A )|(:.* (DROP|REJECT))'
      register: grep
      changed_when: false
      failed_when: grep.rc == 0

    - name: validate 'flush' action
      systemd:
        name: "{{ iptables_apply__service }}"
        enabled: false
        state: stopped
      register: service_status
      failed_when: service_status is changed

    - name: SUCCESSFULLY PASSED TEST FOR ACTION 'FLUSH'
      pause:
        seconds: 10

################################################################################
- name: TEST ROBUSTNESS AGAINST BAD CONNECTION PLUGIN OVERRIDES
  hosts: tests
  become: yes
  # This is good (as above):
  #connection: ssh
  # This is bad:
  vars:
    ansible_connection: ssh

  tasks:
    - name: attempt and gracefull robustness demo
      block:
        - include_role:
            name: iptables_apply
          vars:
            iptables_apply__action: flush
      rescue:
        - name: previous task failed (expected)
          debug:
            msg: >
              The previous task failed because of a bad connection plugin override.
              The failure is expected when the connection is unable to be switched
              to paramiko, and it prevents a fatal 'oops no-rollback' error.
          register: connection_plugin_override

    - name: fail if role succeeded
      fail:
        msg: >
          The previous role play should have failed because of a bad connection
          plugin override (in play vars).
      when: connection_plugin_override is undefined

    - name: SUCCESSFULLY PASSED TEST OF ROBUSTNESS AGAINST BAD CONNECTION PLUGIN OVERRIDES
      pause:
        seconds: 20


################################################################################
- name: TEST ACTION 'TEMPLATE'
  hosts: tests
  become: yes
  roles:
    - role: iptables_apply

  tasks:
    - name: validate templated ruleset
      # That should be enough to state that a firewall is in place
      shell: iptables-save -t filter | grep -E '^:INPUT DROP'
      changed_when: false

    - name: validate 'template' action
      systemd:
        name: "{{ iptables_apply__service }}"
        enabled: true
        state: started
      register: service_status
      failed_when: service_status is changed

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__template_once: no

    - name: force-overwrite failure
      fail:
        msg: "There is some lack of *force overwrite* in 'template'"
      when: iptables_ruleset is not changed

    - name: SUCCESSFULLY PASSED TEST FOR ACTION 'TEMPLATE'
      pause:
        seconds: 10


################################################################################
- name: TEST ACTIONS 'APPEND', 'INSERT' AND 'DELETE'
  hosts: tests
  become: yes
  pre_tasks:
    - name: check the rule to append is not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<({{ to_append[0].dport }}|{{ to_append[0].name }})\>.* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

    - name: check the rule to insert is not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<({{ to_insert[0].dport }}|{{ to_insert[0].name }})\>.* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

    - name: check the rule to delete is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_delete[0].dport }}\>.*\<{{ to_delete[0].name }}\>.* -j ACCEPT'
      changed_when: false

  roles:
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ to_append }}"

    - role: iptables_apply
      iptables_apply__action: insert
      iptables_apply__rules: "{{ to_insert }}"

    - role: iptables_apply
      iptables_apply__action: delete
      iptables_apply__rules: "{{ to_delete }}"

  tasks:
    - name: check the appended rule is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_append[0].dport }}\>.*\<{{ to_append[0].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: check the inserted rule is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_insert[0].dport }}\>.*\<{{ to_insert[0].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: check the deleted rule is not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<({{ to_delete[0].dport }}|{{ to_delete[0].name }})\>.* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

    - name: SUCCESSFULLY PASSED TESTS FOR ACTIONS 'APPEND', 'INSERT' AND 'DELETE'
      pause:
        seconds: 10


################################################################################
- name: TEST INDEMPOTENCY OF ACTIONS 'TEMPLATE', 'APPEND', 'INSERT' AND 'DELETE'
  hosts: tests
  become: yes
  roles:
    - role: iptables_apply

  tasks:
    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'template'"
      when: iptables_ruleset is changed

    - name: SUCCESSFULLY PASSED IDEMPOTENCY TEST FOR 'TEMPLATE'
      pause:
        seconds: 10

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__action: append
        iptables_apply__rules: "{{ to_append }}"

    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'append'"
      when: iptables_ruleset is changed

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__action: append
        iptables_apply__rules: "{{ to_insert }}"

    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'append'"
      when: iptables_ruleset is changed

    - name: SUCCESSFULLY PASSED IDEMPOTENCY TESTS FOR 'APPEND'
      pause:
        seconds: 10

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__action: insert
        iptables_apply__rules: "{{ to_insert }}"

    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'insert'"
      when: iptables_ruleset is changed

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__action: insert
        iptables_apply__rules: "{{ to_append }}"

    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'insert'"
      when: iptables_ruleset is changed

    - name: SUCCESSFULLY PASSED IDEMPOTENCY TESTS FOR 'INSERT'
      pause:
        seconds: 10

    - include_role:
        name: iptables_apply
      vars:
        iptables_apply__action: delete
        iptables_apply__rules: "{{ to_delete }}"

    - name: idempotency failure
      fail:
        msg: "There is some lack of idempotency in 'delete'"
      when: iptables_ruleset is changed

    - name: SUCCESSFULLY PASSED IDEMPOTENCY TESTS FOR 'TEMPLATE', 'APPEND', 'INSERT' AND 'DELETE'
      pause:
        seconds: 10


################################################################################
- name: TEST ROLLBACKS FOR ACTIONS 'DELETE', 'INSERT' AND 'TEMPLATE'
  hosts: tests
  become: yes
  tasks:
    - name: test rollback after bad 'delete'
      block:
        - include_role:
            name: iptables_apply
          vars:
            iptables_apply__action: delete
            iptables_apply__rules: "{{ to_insert }}"
      rescue:
        - name: expected error
          debug:
            msg: "A rollback occured when trying to delete a needed rule"
          register: rollback_delete

    - name: fail if role succeeded
      fail:
        msg: "There is some unexpected issue in rollback feature"
      when: rollback_delete is undefined

    - name: SUCCESSFULLY PASSED TEST OF ROLLBACK FOR ACTION 'DELETE'
      pause:
        seconds: 5

    - name: test rollback after bad 'insert'
      block:
        - include_role:
            name: iptables_apply
          vars:
            iptables_apply__action: insert
            iptables_apply__rules: |
              [ {{ to_delete[0] | combine({"jump":"DROP"}) }} ]
      rescue:
        - name: expected error
          debug:
            msg: "A rollback occured when trying to insert a blocking rule"
          register: rollback_insert

    - name: fail if role succeeded
      fail:
        msg: "There is some unexpected issue in rollback feature"
      when: rollback_insert is undefined

    - name: SUCCESSFULLY PASSED TEST OF ROLLBACK FOR ACTION 'INSERT'
      pause:
        seconds: 5

    - name: test rollback after bad 'template'
      block:
        - include_role:
            name: iptables_apply
          vars:
            iptables_apply__template_once: no
            iptables_apply__template_core: no
      rescue:
        - name: expected error
          debug:
            msg: "A rollback occured when trying to restore bad ruleset from template"
          register: rollback_template

    - name: fail if role succeeded
      fail:
        msg: "There is some unexpected issue in rollback feature"
      when: rollback_template is undefined

    - name: SUCCESSFULLY PASSED TEST OF ROLLBACK FOR ACTION 'TEMPLATE'
      pause:
        seconds: 5


################################################################################
- name: TEST OPTION 'NOFLUSH' OF ACTION 'TEMPLATE'
  hosts: tests
  become: yes
  roles:
    - role: iptables_apply
      iptables_apply__action: flush
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{ to_append }}"
    - role: iptables_apply
      iptables_apply__noflush: yes

  tasks:
    - name: check appended rule is still there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_append[0].dport }}\>.*\<{{ to_append[0].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: SUCCESSFULLY PASSED TEST FOR ACTION 'TEMPLATE' (NOFLUSH)
      pause:
        seconds: 10


################################################################################
- name: TEST RULE UPDATE BY ACTION 'APPEND'
  hosts: tests
  become: yes
  pre_tasks:
    - name: check rule to change is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ iptables_apply__template_rules[0].dport
                              }}\>.*\<{{ iptables_apply__template_rules[0].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: check rule to obtain is not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_update[0].dport }}\>.*\<{{ to_update[0].name }}\>.* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

    - name: check rule to change is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p udp .*\<{{ iptables_apply__template_rules[1].dport
                              }}\>.*\<{{ iptables_apply__template_rules[1].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: check rule to obtain is not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_update[0].dport }}\>.*\<{{ to_update[0].name }}\>.* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

  roles:
    - role: iptables_apply
      iptables_apply__action: append
      iptables_apply__rules: "{{
        [ { 'name': iptables_apply__template_rules[0].name, 'dport': to_update[0].dport } ] + to_update
        }}"

  tasks:
    - name: check rules to change are not there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p (tcp|udp) .* ({{ iptables_apply__template_rules[0].dport
                                     }} .*\<{{ iptables_apply__template_rules[0].name
                                     }}\>)|({{ iptables_apply__template_rules[1].dport
                                     }} .*\<{{ iptables_apply__template_rules[1].name }}\>).* -j ACCEPT'
      register: grep
      failed_when: grep.rc == 0
      changed_when: false

    - name: check rule to obtain is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p tcp .*\<{{ to_update[0].dport }}\>.*\<{{ to_update[0].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: check rule to obtain is there
      shell: >
        iptables-save -t filter |
        grep -Ee '-A INPUT -p udp .*\<{{ to_update[1].dport }}\>.*\<{{ to_update[1].name }}\>.* -j ACCEPT'
      changed_when: false

    - name: SUCCESSFULLY PASSED TEST FOR RULE UPDATE BY ACTION 'APPEND'
      pause:
        seconds: 10


################################################################################
- hosts: tests
  tasks:
    - debug:
        msg: "End Of Playbook: successfully passed all tests for role `iptables_apply`"
